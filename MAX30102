Optical SP02 Detection (SPK Algorithm) using the MAX30105 Breakout
  
  Hardware Connections (Breakoutboard to Arduino):
  -5V = 5V (3.3V is allowed)
  -GND = GND
  -SDA = A4 (or SDA)
  -SCL = A5 (or SCL)
  -INT = Not connected
 
  The MAX30105 Breakout can handle 5V or 3.3V I2C logic.
  
*/

#include "Wire.h"        //This library allows us to communicate with I2C/TWI    devices i.e between master and slave with the help of SDA and SCL.
#include "MAX30105.h"   //Allows to control the sensor LEDs and acquire the raw data for PPG and pulseoximetry.
#include "spo2_algorithm.h" // This library is used to calculate spo2 values from the raw data of Red and IR lights.

MAX30105 particleSensor;// declaration of the variable 

#define MAX_BRIGHTNESS 255 // the brightness is set to high 

#if defined(__AVR_ATmega328P__) || defined(__AVR_ATmega168__)
//Arduino Uno doesn't have enough SRAM to store 100 samples of IR led data and red led data in 32-bit format
//To solve this problem, 16-bit MSB of the sampled data will be truncated. Samples become 16-bit data.
uint16_t irBuffer[100]; //declares an array called irBuffer that is 100 bytes long and will be used to store infrared LED data from the sensor.
uint16_t redBuffer[100];  //redBuffer is declared as an array of 100 bytes which will be used to store data from the Red LED on the sensor.
#else
uint32_t irBuffer[100]; //infrared LED sensor data
uint32_t redBuffer[100];  //red LED sensor data
#endif

int32_t bufferLength; //The bufferLength variable stores how many bytes are in each buffer
int32_t spo2; //spo2 stores how many samples there are in each buffer.
int8_t validSPO2; //indicator to show if the SPO2 calculation is valid(if 1 then valid and if 0 then not valid)
int32_t heartRate; //heartRate stores how many times per second the Arduino reads a pulse from our finger 
int8_t validHeartRate; //indicator to show if the heart rate calculation is valid( whether or not it actually reading a pulse at all (0 means no pulse).)

byte pulseLED = 11; //Must be on PWM pin
byte readLED = 13; //Blinks with each data read

void setup()
{
  Serial.begin(115200); // initialize serial communication at 115200 bits per second:(trasmit the information faster baut rate is set high)

  pinMode(pulseLED, OUTPUT);
  pinMode(readLED, OUTPUT);

  // Initialize sensor
  if (!particleSensor.begin(Wire, I2C_SPEED_FAST)) //Use default I2C port, 400kHz speed(This function initializes the Wire library and join the I2C bus as a controller or a peripheral. )
  {
    Serial.println(F("MAX30105 was not found. Please check wiring/power."));
    while (1);
  }

  byte ledBrightness = 60; //Options: 0=Off to 255=50mA(Determines the intensity of both Red and IR Light. Lower the brightness 
                           //to conserve power in battery applications. Increase the brightness to get good SNR.)
  byte sampleAverage = 4; //Options: 1, 2, 4, 8, 16, 32(Sets the Sampling rate for internal ADC.  change this to get smooth readings from the ADC)
  byte ledMode = 2; //Options: 1 = Red only, 2 = Red + IR (MAX30102 supports only Red + IR)
  byte sampleRate = 100; //Options: 50, 100, 200, 400, 800, 1000, 1600, 3200(ADC Sampling rate. 
                         //Increase/Decrease as per LED Brightness, ADC Range, and PulseWidth.)
  int pulseWidth = 411; //Options: 69, 118, 215, 411(Sets the on time for the RED and IR Light. 
                        //Lower pulse widths with a low sample rate are preferable but the noise will be high.)
  int adcRange = 4096; //Options: 2048, 4096, 8192, 16384(The sensor transmits red and ir light and measures 
                      //the reflected light using an ADC. This parameter sets the ADC Range. Start with 2048 during calibration and move higher as required.)

  particleSensor.setup(ledBrightness, sampleAverage, ledMode, sampleRate, pulseWidth, adcRange); //Configure sensor with these settings
}

void loop()
{
  bufferLength = 100; //buffer length of 100 samples stores 4 seconds of samples running at 25sps

  //read the first 100 samples, and determine the signal range
  for (byte i = 0 ; i < bufferLength ; i++)
  {
    while (particleSensor.available() == false) //do we have new data?
      particleSensor.check(); //Check the sensor for new data

    redBuffer[i] = particleSensor.getRed();// return red value
    irBuffer[i] = particleSensor.getIR();// return IR value
    particleSensor.nextSample(); //We're finished with this sample so move to next sample

    Serial.print(F("red="));
    Serial.print(redBuffer[i], DEC);
    Serial.print(F(", ir="));
    Serial.println(irBuffer[i], DEC);
  }

  //calculate heart rate and SpO2 after first 100 samples (first 4 seconds of samples)
  maxim_heart_rate_and_oxygen_saturation(irBuffer, bufferLength, redBuffer, &spo2, &validSPO2, &heartRate, &validHeartRate);

  //Continuously taking samples from MAX30102.  Heart rate and SpO2 are calculated every 1 second
  while (1)
  {
    //dumping the first 25 sets of samples in the memory and shift the last 75 sets of samples to the top
    for (byte i = 25; i < 100; i++)
    {
      redBuffer[i - 25] = redBuffer[i];
      irBuffer[i - 25] = irBuffer[i];
    }

    //take 25 sets of samples before calculating the heart rate.
    for (byte i = 75; i < 100; i++)
    {
      while (particleSensor.available() == false) //do we have new data?
        particleSensor.check(); //Check the sensor for new data

      digitalWrite(readLED, !digitalRead(readLED)); //Blink onboard LED with every data read

      redBuffer[i] = particleSensor.getRed();
      irBuffer[i] = particleSensor.getIR();
      particleSensor.nextSample(); //We're finished with this sample so move to next sample

      //send samples and calculation result to terminal program through UART
      Serial.print(F("red="));
      Serial.print(redBuffer[i], DEC);
      Serial.print(F(", ir="));
      Serial.print(irBuffer[i], DEC);

      Serial.print(F(", HR="));
      Serial.print(heartRate, DEC);

      Serial.print(F(", HRvalid="));
      Serial.print(validHeartRate, DEC);

      Serial.print(F(", SPO2="));
      Serial.print(spo2, DEC);

      Serial.print(F(", SPO2Valid="));
      Serial.println(validSPO2, DEC);
    }

    //After gathering 25 new samples recalculate HR and SP02
    maxim_heart_rate_and_oxygen_saturation(irBuffer, bufferLength, redBuffer, &spo2, &validSPO2, &Heartrate, &validHeartrate);
  }
}
